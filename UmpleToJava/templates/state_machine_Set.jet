<%@ jet package="cruise.umple.ignore" class="Ignore"%>
<%
  boolean hasEntry = false;
  boolean hasExit = false;
  boolean isFirstEntry = true;
  boolean isFirstExit = true;
  State parentState = sm.getParentState();
  StateMachine parentSm = parentState != null ? parentState.getStateMachine() : null;
  String customSetPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", gen.translate("setMethod",sm)));
  String customSetPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after", gen.translate("setMethod",sm)));
  String customExitPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", gen.translate("exitMethod",sm)));
  String customExitPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after", gen.translate("exitMethod",sm)));
  
  StringBuilder entryActions = new StringBuilder();
  StringBuilder exitActions = new StringBuilder();
  
  StringBuilder exitLineNumbers = new StringBuilder();
  StringBuilder exitFileNames = new StringBuilder();
  StringBuilder exitJavaLineNumbers = new StringBuilder();
  StringBuilder exitLengths = new StringBuilder();
  StringBuilder entryLineNumbers = new StringBuilder();
  StringBuilder entryFileNames = new StringBuilder();
  List<Integer> entryJavaLineNumbers = new ArrayList<Integer>();
  StringBuilder entryJavaLineBuilder = new StringBuilder();
  StringBuilder entryLengths = new StringBuilder();
  int preJavaLine = stringBuffer.toString().split("\\n").length;
  int entryJavaLine = stringBuffer.toString().split("\\n").length+(customSetPostfixCode != null?customSetPostfixCode.split("\\n").length:0)+(customSetPrefixCode != null?customSetPrefixCode.split("\\n").length:0)+10+(parentState != null?2:0);
  int exitJavaLine = stringBuffer.toString().split("\\n").length+(customExitPrefixCode != null?customExitPrefixCode.split("\\n").length:0)+8;
  String umpleSourceFileFormat = "\n  @umplesourcefile(line={{0}}, file={{1}}, javaline={{2}}, length={{3}})";
  
  java.util.regex.Pattern umpleSourcePattern = java.util.regex.Pattern.compile(".*\\{(.*)\\}.*\\{(.*)\\}.*\\{(.*)\\}.*\\{(.*)\\}.*");
  String fakeGen = isFake?"FAKE":getStateMachine1Code(new StringBuffer(), model,uClass,gClass,gen,isFirst,true);
  String umpleSourceFile = getUmpleSourceFile(baseJavaLine,new String[]{
      customSetPrefixCode,customSetPostfixCode},
      fakeGen).replaceAll("\\n","");
  java.util.regex.Matcher umpleSourceMatch = umpleSourcePattern.matcher(umpleSourceFile);
  if(umpleSourceMatch.matches()&&!"".equals(umpleSourceFile)){
    entryLineNumbers.append(","+umpleSourceMatch.group(1));
    entryFileNames.append(","+umpleSourceMatch.group(2));
    entryJavaLineBuilder.append(","+umpleSourceMatch.group(3));
    entryLengths.append(","+umpleSourceMatch.group(4));
  }
  umpleSourceFile = getUmpleSourceFile(baseJavaLine,new String[]{
      customExitPrefixCode,customExitPostfixCode},
      fakeGen).replaceAll("\\n","");
  if(umpleSourceMatch.matches()&&!"".equals(umpleSourceFile)){
    exitLineNumbers.append(","+umpleSourceMatch.group(1));
    exitFileNames.append(","+umpleSourceMatch.group(2));
    exitJavaLineNumbers.append(","+umpleSourceMatch.group(3));
    exitLengths.append(","+umpleSourceMatch.group(4));
  }
  
  for(State state : sm.getStates())
  {
    boolean hasThisEntry = false;
    boolean hasThisExit = false;
    for(Action action : state.getActions())
    {
      if ("entry".equals(action.getActionType()))
      {
        TraceItem traceItem = state.getTraced("entry",uClass);
        if (!hasThisEntry)
        {
          if (!isFirstEntry)
          {
            entryActions.append("\n      ");
            entryJavaLine++;
          }
          entryActions.append(StringFormatter.format("case {0}:",gen.translate("stateOne",state)));
          entryJavaLine++;
        }
        hasEntry = true;
        hasThisEntry = true;
        isFirstEntry = false;
        if(traceItem!=null)
        {
          entryActions.append("\n"+traceItem.trace(gen, state,"sm_e", uClass));
          entryJavaLine++;
        }
        Position p = action.getPosition();
        if (p != null) {
          entryActions.append("\n        // line " + p.getLineNumber() + " \"" + p.getRelativePath(sm.getUmpleClass(), "Java") + "\"");
          entryLineNumbers.append(","+p.getLineNumber());
          entryFileNames.append(",\""+p.getRelativePath(sm.getUmpleClass(), "Java").replace("\\","/").replaceAll(".*/","")+"\"");
          entryJavaLineNumbers.add(entryJavaLine);
          entryLengths.append(","+action.getActionCode().split("\\n").length);
          entryJavaLine++;
        }

        if (state.getIsDeepHistoryState() == true){
          
          String actionCode = action.getActionCode();
          int x = actionCode.lastIndexOf('.');
          int y = actionCode.indexOf(')',x);
          String substate = actionCode.substring(x+1,y);
          String beginning = actionCode.substring(0,x + 1);
          String end = actionCode.substring(y);
          actionCode = beginning.concat("HStar").concat(end);
          
          entryActions.append(StringFormatter.format("\n        if({0}HStar == {1}.{2})", gen.translate("stateMachineOne",sm), gen.translate("type",sm), substate));
          entryJavaLine++;
          entryActions.append("\n        {");
          entryJavaLine++;  
          
          entryActions.append("\n          " + actionCode);
          entryJavaLine+=actionCode.split("\\n").length;
          

          //TODO: add more spaces if deepHistory
          //entryActions.append(StringFormatter.format("{0}{1}({2}{3});","\n          ",gen.translate("setMethod",state.getStateMachine()),gen.translate("stateMachineOne",state.getStateMachine()),gen.translate("stateOne",state)));
          //entryJavaLine++;
          entryActions.append("\n        }");
          entryJavaLine++;
        }
        else{
          entryActions.append("\n        " + action.getActionCode());
          entryJavaLine+=action.getActionCode().split("\\n").length;
        }

      }
      else if ("exit".equals(action.getActionType()))
      {
        TraceItem traceItem = state.getTraced("exit",uClass);
        TraceItem traceItemActivity = state.getTraced("activity",uClass);
        
        if (!hasThisExit)
        {
          if (!isFirstExit)
          {
            exitActions.append("\n      ");
            exitJavaLine++;
          }
          isFirstExit = false;
          exitActions.append(StringFormatter.format("case {0}:",gen.translate("stateOne",state)));
          exitJavaLine++;
        }
        hasExit = true;
        hasThisExit = true;
        isFirstExit = false;
        if(traceItem!=null)
        {
          exitActions.append("\n"+traceItem.trace(gen, state,"sm_x", uClass));
          exitJavaLine++;
        }
        Position p = action.getPosition();
        if (p != null) {
          exitActions.append("\n        // line " + p.getLineNumber() + " \"" + p.getRelativePath(sm.getUmpleClass(), "Java") + "\"");
          exitLineNumbers.append(","+p.getLineNumber());
          exitFileNames.append(",\""+p.getRelativePath(sm.getUmpleClass(), "Java").replace("\\","/").replaceAll(".*/","")+"\"");
          exitJavaLineNumbers.append(","+exitJavaLine);
          exitLengths.append(","+action.getActionCode().split("\\n").length);
          exitJavaLine++;
        }
        if(traceItemActivity!=null)
        {
        	exitActions.append("\n        " + action.getActionCode().substring(0, action.getActionCode().length() - 1).concat(traceItemActivity.trace(gen, state.getActivity(),"sm_di", uClass))+" }");
            exitJavaLine+=action.getActionCode().split("\\n").length;
        	exitJavaLine++;
        }
        else
        {
        	exitActions.append("\n        " + action.getActionCode());
            exitJavaLine+=action.getActionCode().split("\\n").length;
        }
      }
    }
    if (state.getActivity() != null)
    {
      if (!hasThisEntry)
      {
        if (!isFirstEntry)
        {
          entryActions.append("\n      ");
          entryJavaLine++;
        }
        entryActions.append(StringFormatter.format("case {0}:",gen.translate("stateOne",state)));
        entryJavaLine++;
      }
      TraceItem traceItem = state.getTraced("activity",uClass);
      hasEntry = true;
      hasThisEntry = true;
      isFirstEntry = false;
      
      if(traceItem!=null)
      {
    	  entryActions.append("\n"+traceItem.trace(gen, state.getActivity(),"sm_da", uClass));
    	  entryJavaLine++;
      }
      entryActions.append(StringFormatter.format("\n        {1} = new DoActivityThread(this,\"{0}\");",gen.translate("doActivityMethod",state),gen.translate("doActivityThread",state)));
      entryJavaLine++;
    }
    
    if (hasThisEntry)
    {
      entryActions.append("\n        break;");
      entryJavaLine++;
    }
    
    if (hasThisExit)
    {
      exitActions.append("\n        break;");
      exitJavaLine++;
    }
    
  }
%>
<% if (hasExit) {
  if(exitLineNumbers.toString().length()>0){
  %><%= 
  StringFormatter.format(
  umpleSourceFileFormat,
  exitLineNumbers.toString().substring(1),
  exitFileNames.toString().substring(1),
  exitJavaLineNumbers.toString().substring(1),
  exitLengths.toString().substring(1)
  ) %><%
  } %>
  private void <%=gen.translate("exitMethod",sm)%>()
  {
    <% if (customExitPrefixCode != null) { append(stringBuffer, "\n{0}",GeneratorHelper.doIndent(customExitPrefixCode, "    ")); } %>
    switch(<%= gen.translate("stateMachineOne",sm) %>)
    {
      <%= exitActions %>
    }
    <% if (customExitPostfixCode != null) { append(stringBuffer, "\n{0}",GeneratorHelper.doIndent(customExitPostfixCode, "    ")); } %>
  }
<%= (isFake?"\nFAKE":"")%><% 
    List<Integer> tempList = new ArrayList<Integer>();
    tempList.addAll(entryJavaLineNumbers);
    entryJavaLineNumbers.clear();
    for(Integer i: tempList){
      entryJavaLineNumbers.add(i+(stringBuffer.toString().split("\\n").length-preJavaLine));
    }
  }
  if(entryJavaLineBuilder.toString().length()>0){
    for(Integer i: entryJavaLineNumbers){
      entryJavaLineBuilder.append(","+i);
    }
    
  %><%= 
  StringFormatter.format(
  umpleSourceFileFormat,
    entryLineNumbers.toString().substring(1),
    entryFileNames.toString().substring(1),
    entryJavaLineBuilder.toString().substring(1),
    entryLengths.toString().substring(1)
  ) %><%
  } %>
  private void <%=gen.translate("setMethod",sm)%>(<%= gen.translate("type",sm) %> <%= gen.translate("parameterOne",sm) %>)
  {
    <% if (customSetPrefixCode != null) { append(stringBuffer, "\n{0}",GeneratorHelper.doIndent(customSetPrefixCode, "    ")); } %>
    <%= gen.translate("stateMachineOne",sm) %> = <%= gen.translate("parameterOne",sm) %>;
<% if (parentState != null) { %>
    if (<%= gen.translate("stateMachineOne",parentSm) %> != <%= gen.translate("type",parentSm) %>.<%= gen.translate("stateOne",parentState) %> && <%= gen.translate("parameterOne",sm) %> != <%= gen.translate("type",sm) %>.<%= gen.translate("stateNull",sm) %>) { <%=gen.translate("setMethod",parentSm)%>(<%= gen.translate("type",parentSm) %>.<%= gen.translate("stateOne",parentState) %>); }
<% } %>
    <% if (customSetPostfixCode != null) { append(stringBuffer, "\n{0}",GeneratorHelper.doIndent(customSetPostfixCode, "    ")); } %>
<% if (hasEntry) { %>

    // entry actions and do activities
    switch(<%= gen.translate("stateMachineOne",sm) %>)
    {
      <%= entryActions %>
    }
<% } %>
<% if (parentState != null) { %>
  <% if (sm.getContainsDeepHistoryState()) { %>
    if (<%= gen.translate("parameterOne",sm) %> == <%= gen.translate("type",sm)  %>.HStar) { <%= gen.translate("stateMachineOne",sm) %> = <%= gen.translate("stateMachineOne", sm) %>HStar;}
  <% } %>
<% } %>
  }

